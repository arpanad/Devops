PS C:\WINDOWS\system32> kubectl get namespaces
NAME                   STATUS   AGE
default                Active   13m
kube-node-lease        Active   14m
kube-public            Active   14m
kube-system            Active   14m
kubernetes-dashboard   Active   11m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po --all-namespaces
NAMESPACE              NAME                                        READY   STATUS    RESTARTS   AGE
kube-system            coredns-787d4945fb-ghlrm                    1/1     Running   0          13m
kube-system            etcd-minikube                               1/1     Running   0          14m
kube-system            kube-apiserver-minikube                     1/1     Running   0          14m
kube-system            kube-controller-manager-minikube            1/1     Running   0          14m
kube-system            kube-proxy-sbb2v                            1/1     Running   0          13m
kube-system            kube-scheduler-minikube                     1/1     Running   0          14m
kube-system            storage-provisioner                         1/1     Running   0          14m
kubernetes-dashboard   dashboard-metrics-scraper-5c6664855-69q7c   1/1     Running   0          11m
kubernetes-dashboard   kubernetes-dashboard-55c4cbbc7c-kpw6p       1/1     Running   0          11m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> ^C
PS C:\WINDOWS\system32> kubectl get po -n coredns-787d4945fb-ghlrm
No resources found in coredns-787d4945fb-ghlrm namespace.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po -n etcd-minikube
No resources found in etcd-minikube namespace.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get svc -n etcd-minikube
No resources found in etcd-minikube namespace.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'metadata.namespace']}"
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run nginx --image=nginx --restart=Never
pod/nginx created
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po
NAME    READY   STATUS              RESTARTS   AGE
nginx   0/1     ContainerCreating   0          13s
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run nginx --image=nginx --restart=Never --dry-run -o yaml > nginx-pod.yaml
W0305 08:24:41.407562   11156 helpers.go:663] --dry-run is deprecated and can be replaced with --dry-run=client.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run nginx --image=nginx --restart=Never --dry-run=client -o yaml > nginx-pod.yaml
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> cat nginx-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl create -f nginx-pod.yaml
Error from server (AlreadyExists): error when creating "nginx-pod.yaml": pods "nginx" already exists
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl delete po nginx
pod "nginx" deleted
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po
No resources found in default namespace.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl create -f nginx-pod.yaml
pod/nginx created
PS C:\WINDOWS\system32> kubectl get po
NAME    READY   STATUS              RESTARTS   AGE
nginx   0/1     ContainerCreating   0          3s
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl describe pod nginx
Name:             nginx
Namespace:        default
Priority:         0
Service Account:  default
Node:             minikube/192.168.49.2
Start Time:       Sun, 05 Mar 2023 08:26:42 +0530
Labels:           run=nginx
Annotations:      <none>
Status:           Running
IP:               10.244.0.6
IPs:
  IP:  10.244.0.6
Containers:
  nginx:
    Container ID:   docker://63a6d988987cc41d4c5cc393a60557850bf503b09631f644cdc8805ecaaedc5e
    Image:          nginx
    Image ID:       docker-pullable://nginx@sha256:aa0afebbb3cfa473099a62c4b32e9b3fb73ed23f2a75a65ce1d4b4f55a5c2ef2
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Sun, 05 Mar 2023 08:26:47 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-vcz6f (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-vcz6f:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  22s   default-scheduler  Successfully assigned default/nginx to minikube
  Normal  Pulling    21s   kubelet            Pulling image "nginx"
  Normal  Pulled     17s   kubelet            Successfully pulled image "nginx" in 3.312316012s (3.312347201s including waiting)
  Normal  Created    17s   kubelet            Created container nginx
  Normal  Started    17s   kubelet            Started container nginx
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get namespaces
NAME                   STATUS   AGE
default                Active   19m
kube-node-lease        Active   19m
kube-public            Active   19m
kube-system            Active   19m
kubernetes-dashboard   Active   16m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po --all-namespaces
NAMESPACE              NAME                                        READY   STATUS    RESTARTS   AGE
default                nginx                                       1/1     Running   0          71s
kube-system            coredns-787d4945fb-ghlrm                    1/1     Running   0          19m
kube-system            etcd-minikube                               1/1     Running   0          19m
kube-system            kube-apiserver-minikube                     1/1     Running   0          19m
kube-system            kube-controller-manager-minikube            1/1     Running   0          19m
kube-system            kube-proxy-sbb2v                            1/1     Running   0          19m
kube-system            kube-scheduler-minikube                     1/1     Running   0          19m
kube-system            storage-provisioner                         1/1     Running   0          19m
kubernetes-dashboard   dashboard-metrics-scraper-5c6664855-69q7c   1/1     Running   0          17m
kubernetes-dashboard   kubernetes-dashboard-55c4cbbc7c-kpw6p       1/1     Running   0          17m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po -n nginx
No resources found in nginx namespace.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po -n default
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          107s
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get svc -n default
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   20m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'metadata.namespace']}"
>>
nginx default
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2023-03-05T02:56:42Z"
  labels:
    run: nginx
  name: nginx
  namespace: default
  resourceVersion: "1362"
  uid: d6f09755-1bbd-4b09-8c28-feef7fdccfde
spec:
  containers:
  - image: nginx
    imagePullPolicy: Always
    name: nginx
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-vcz6f
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: minikube
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-vcz6f
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2023-03-05T02:56:42Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2023-03-05T02:56:48Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2023-03-05T02:56:48Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2023-03-05T02:56:42Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://63a6d988987cc41d4c5cc393a60557850bf503b09631f644cdc8805ecaaedc5e
    image: nginx:latest
    imageID: docker-pullable://nginx@sha256:aa0afebbb3cfa473099a62c4b32e9b3fb73ed23f2a75a65ce1d4b4f55a5c2ef2
    lastState: {}
    name: nginx
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-03-05T02:56:47Z"
  hostIP: 192.168.49.2
  phase: Running
  podIP: 10.244.0.6
  podIPs:
  - ip: 10.244.0.6
  qosClass: BestEffort
  startTime: "2023-03-05T02:56:42Z"
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o yaml --export
error: unknown flag: --export
See 'kubectl get --help' for usage.
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl delete po nginx --grace-period=0 --force
Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.
pod "nginx" force deleted
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run nginx --image=nginx:1.17.4 --restart=Never --port=80
pod/nginx created
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po
NAME    READY   STATUS              RESTARTS   AGE
nginx   0/1     ContainerCreating   0          9s
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl set image pod/nginx nginx=nginx:1.15-alpine
pod/nginx image updated
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl describe po nginx
Name:             nginx
Namespace:        default
Priority:         0
Service Account:  default
Node:             minikube/192.168.49.2
Start Time:       Sun, 05 Mar 2023 08:32:21 +0530
Labels:           run=nginx
Annotations:      <none>
Status:           Pending
IP:
IPs:              <none>
Containers:
  nginx:
    Container ID:
    Image:          nginx:1.15-alpine
    Image ID:
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Waiting
      Reason:       ContainerCreating
    Ready:          False
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-dz42k (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             False
  ContainersReady   False
  PodScheduled      True
Volumes:
  kube-api-access-dz42k:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  44s   default-scheduler  Successfully assigned default/nginx to minikube
  Normal  Pulling    43s   kubelet            Pulling image "nginx:1.17.4"
  Normal  Pulled     9s    kubelet            Successfully pulled image "nginx:1.17.4" in 34.176054167s (34.176089134s including waiting)
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubeclt edit po nginx
kubeclt : The term 'kubeclt' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct
and try again.
At line:1 char:1
+ kubeclt edit po nginx
+ ~~~~~~~
    + CategoryInfo          : ObjectNotFound: (kubeclt:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\WINDOWS\system32> kubectl edit po nginx
pod/nginx edited
PS C:\WINDOWS\system32> kubectl describe po nginx
Name:             nginx
Namespace:        default
Priority:         0
Service Account:  default
Node:             minikube/192.168.49.2
Start Time:       Sun, 05 Mar 2023 08:32:21 +0530
Labels:           run=nginx
Annotations:      <none>
Status:           Running
IP:               10.244.0.7
IPs:
  IP:  10.244.0.7
Containers:
  nginx:
    Container ID:   docker://63e62b589355842ef1f9209bf612d15f79e5a7913c833f4c39ef00e7c7bba0f9
    Image:          nginx:1.17-alpine
    Image ID:       docker-pullable://nginx@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 05 Mar 2023 08:33:20 +0530
    Last State:     Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Sun, 05 Mar 2023 08:33:06 +0530
      Finished:     Sun, 05 Mar 2023 08:33:06 +0530
    Ready:          True
    Restart Count:  1
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-dz42k (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-dz42k:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age                 From               Message
  ----    ------     ----                ----               -------
  Normal  Scheduled  2m31s               default-scheduler  Successfully assigned default/nginx to minikube
  Normal  Pulling    2m30s               kubelet            Pulling image "nginx:1.17.4"
  Normal  Pulled     116s                kubelet            Successfully pulled image "nginx:1.17.4" in 34.176054167s (34.176089134s including waiting)
  Normal  Pulling    105s                kubelet            Pulling image "nginx:1.15-alpine"
  Normal  Pulled     94s                 kubelet            Successfully pulled image "nginx:1.15-alpine" in 11.513696647s (11.513733588s including waiting)
  Normal  Created    92s (x2 over 107s)  kubelet            Created container nginx
  Normal  Started    92s (x2 over 106s)  kubelet            Started container nginx
  Normal  Killing    10s (x2 over 106s)  kubelet            Container nginx definition changed, will be restarted
  Normal  Pulling    9s                  kubelet            Pulling image "nginx:1.17-alpine"
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -w
NAME    READY   STATUS    RESTARTS      AGE
nginx   1/1     Running   2 (49s ago)   3m11s
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o jsonpath='{.spec.containers[].image}{"\n"}
>>
>> ^C
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o jsonpath='{.spec.containers[].image}{"\n"}'
error: error parsing jsonpath {.spec.containers[].image}{\n}, unrecognized character in action: U+005C '\'
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o jsonpath='{.spec.containers[].image}'
nginx:1.17-alpine
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run nginx --image=nginx --restart=Never
Error from server (AlreadyExists): pods "nginx" already exists
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl exec -it nginx /bin/sh
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
/ #
/ #
/ #
/ # ls
bin    dev    etc    home   lib    media  mnt    opt    proc   root   run    sbin   srv    sys    tmp    usr    var
/ # pwd
/
/ #
/ #
/ # exit
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o wide
NAME    READY   STATUS    RESTARTS        AGE     IP           NODE       NOMINATED NODE   READINESS GATES
nginx   1/1     Running   2 (3m21s ago)   5m43s   10.244.0.7   minikube   <none>           <none>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=busybox --restart=Never -- ls
>>
pod/busybox created
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl logs busybox
bin
dev
etc
home
lib
lib64
proc
root
sys
tmp
usr
var
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl logs busybox -p
Error from server (BadRequest): previous terminated container "busybox" in pod "busybox" not found
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=busybox --restart=Never -- ls
>>
Error from server (AlreadyExists): pods "busybox" already exists
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=busybox --restart=Never -- /bin/sh -c "sleep 3600"
Error from server (AlreadyExists): pods "busybox" already exists
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl delete po busybox
pod "busybox" deleted
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=busybox --restart=Never -- /bin/sh -c "sleep 3600"
pod/busybox created
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po nginx -o wide
NAME    READY   STATUS    RESTARTS        AGE     IP           NODE       NOMINATED NODE   READINESS GATES
nginx   1/1     Running   2 (7m29s ago)   9m51s   10.244.0.7   minikube   <none>           <none>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl exec -it busybox -- wget -o- 10.244.0.7
Connecting to 10.244.0.7 (10.244.0.7:80)
saving to 'index.html'
index.html           100% |*******************************************************************************************************************************************************************|   612  0:00:00 ETA
'index.html' saved
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=nginx --restart=Never -it -- echo "How are you"
>>
Error from server (AlreadyExists): pods "busybox" already exists
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl delete po busybox
pod "busybox" deleted
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=nginx --restart=Never -it -- echo "How are you"
>>
Error from server (AlreadyExists): object is being deleted: pods "busybox" already exists
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po
NAME    READY   STATUS    RESTARTS        AGE
nginx   1/1     Running   2 (9m12s ago)   11m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get svc
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   36m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get svc -n default
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   36m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get namespace
NAME                   STATUS   AGE
default                Active   37m
kube-node-lease        Active   37m
kube-public            Active   37m
kube-system            Active   37m
kubernetes-dashboard   Active   34m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get pods --sort-by=.metadata.name
NAME    READY   STATUS    RESTARTS      AGE
nginx   1/1     Running   2 (10m ago)   13m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get pods--sort-by=.metadata.creationTimestamp
error: the server doesn't have a resource type "pods--sort-by="
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get po busybox
Error from server (NotFound): pods "busybox" not found
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl get pods --sort-by=.metadata.name
NAME    READY   STATUS    RESTARTS      AGE
nginx   1/1     Running   2 (11m ago)   13m
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32> kubectl run busybox --image=nginx --restart=Never -it -- echo "How are you"
>>
How are you
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>
PS C:\WINDOWS\system32>























========================================================================================================================================================================
PS C:\Windows\system32> kubectl version
WARNING: This version information is deprecated and will be replaced with the output from kubectl version --short.  Use --output=yaml|json to get the full version.
Client Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.4", GitCommit:"872a965c6c6526caa949f0c6ac028ef7aff3fb78", GitTreeState:"clean", BuildDate:"2022-11-09T13:36:36Z", GoVersion:"go1.19.3", Compiler:"gc", Platform:"windows/amd64"}
Kustomize Version: v4.5.7
Server Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.4", GitCommit:"872a965c6c6526caa949f0c6ac028ef7aff3fb78", GitTreeState:"clean", BuildDate:"2022-11-09T13:29:58Z", GoVersion:"go1.19.3", Compiler:"gc", Platform:"linux/amd64"}
PS C:\Windows\system32> kubectl get namespaces
NAME              STATUS   AGE
default           Active   3m10s
kube-node-lease   Active   3m12s
kube-public       Active   3m12s
kube-system       Active   3m12s
PS C:\Windows\system32> kubectl get po --all-namespaces
NAMESPACE     NAME                                     READY   STATUS    RESTARTS   AGE
kube-system   coredns-565d847f94-qnlrc                 1/1     Running   0          3m21s
kube-system   coredns-565d847f94-tjhm7                 1/1     Running   0          3m21s
kube-system   etcd-docker-desktop                      1/1     Running   0          3m24s
kube-system   kube-apiserver-docker-desktop            1/1     Running   0          3m26s
kube-system   kube-controller-manager-docker-desktop   1/1     Running   0          3m24s
kube-system   kube-proxy-znnkk                         1/1     Running   0          3m21s
kube-system   kube-scheduler-docker-desktop            1/1     Running   0          3m19s
kube-system   storage-provisioner                      1/1     Running   0          3m14s
kube-system   vpnkit-controller                        1/1     Running   0          3m13s
PS C:\Windows\system32> kubectl get po -n kube-system
NAME                                     READY   STATUS    RESTARTS   AGE
coredns-565d847f94-qnlrc                 1/1     Running   0          4m35s
coredns-565d847f94-tjhm7                 1/1     Running   0          4m35s
etcd-docker-desktop                      1/1     Running   0          4m38s
kube-apiserver-docker-desktop            1/1     Running   0          4m40s
kube-controller-manager-docker-desktop   1/1     Running   0          4m38s
kube-proxy-znnkk                         1/1     Running   0          4m35s
kube-scheduler-docker-desktop            1/1     Running   0          4m33s
storage-provisioner                      1/1     Running   0          4m28s
vpnkit-controller                        1/1     Running   0          4m27s
PS C:\Windows\system32> kubectl get svc -n kube-system
NAME       TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)                  AGE
kube-dns   ClusterIP   10.96.0.10   <none>        53/UDP,53/TCP,9153/TCP   5m8s
PS C:\Windows\system32> kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'metadata.namespace']}"
PS C:\Windows\system32> kubectl run nginx --image=nginx --restart=Never
pod/nginx created
PS C:\Windows\system32> kubectl get po
NAME    READY   STATUS              RESTARTS   AGE
nginx   0/1     ContainerCreating   0          10s
PS C:\Windows\system32> kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'metadata.namespace']}"
nginx default
PS C:\Windows\system32> kubectl run nginx-yaml --image=nginx --restart=Never --dry-run -o yaml > nginx-pod.yaml
W0319 05:56:27.127999    2896 helpers.go:663] --dry-run is deprecated and can be replaced with --dry-run=client.
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl run nginx --image=nginx --restart=Never --dry-run=client -o yaml > nginx-pod.yaml



PS C:\Windows\system32> kubectl create -f nginx-pod.yaml
pod/nginx created
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get pod
NAME    READY   STATUS    RESTARTS   AGE
nginx   1/1     Running   0          32s
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2023-03-19T00:33:20Z"
  labels:
    run: nginx
  name: nginx
  namespace: default
  resourceVersion: "1524"
  uid: a1a8225f-b2de-4e60-9164-a5dfe039a00c
spec:
  containers:
  - image: nginx
    imagePullPolicy: Always
    name: nginx
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-rvgl6
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: docker-desktop
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: kube-api-access-rvgl6
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2023-03-19T00:33:20Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2023-03-19T00:33:25Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2023-03-19T00:33:25Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2023-03-19T00:33:20Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://824c39f3523f193b1a07e05b10c806b137184a92dcdfe7022c3b5ba04f269712
    image: nginx:latest
    imageID: docker-pullable://nginx@sha256:aa0afebbb3cfa473099a62c4b32e9b3fb73ed23f2a75a65ce1d4b4f55a5c2ef2
    lastState: {}
    name: nginx
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2023-03-19T00:33:24Z"
  hostIP: 192.168.65.4
  phase: Running
  podIP: 10.1.0.7
  podIPs:
  - ip: 10.1.0.7
  qosClass: BestEffort
  startTime: "2023-03-19T00:33:20Z"
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -o yaml --export
error: unknown flag: --export
See 'kubectl get --help' for usage.



PS C:\Windows\system32> kubectl describe pod nginx
Name:             nginx
Namespace:        default
Priority:         0
Service Account:  default
Node:             docker-desktop/192.168.65.4
Start Time:       Sun, 19 Mar 2023 06:03:20 +0530
Labels:           run=nginx
Annotations:      <none>
Status:           Running
IP:               10.1.0.7
IPs:
  IP:  10.1.0.7
Containers:
  nginx:
    Container ID:   docker://824c39f3523f193b1a07e05b10c806b137184a92dcdfe7022c3b5ba04f269712
    Image:          nginx
    Image ID:       docker-pullable://nginx@sha256:aa0afebbb3cfa473099a62c4b32e9b3fb73ed23f2a75a65ce1d4b4f55a5c2ef2
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Sun, 19 Mar 2023 06:03:24 +0530
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-rvgl6 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-rvgl6:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  11m   default-scheduler  Successfully assigned default/nginx to docker-desktop
  Normal  Pulling    11m   kubelet            Pulling image "nginx"
  Normal  Pulled     11m   kubelet            Successfully pulled image "nginx" in 2.8576236s
  Normal  Created    11m   kubelet            Created container nginx
  Normal  Started    11m   kubelet            Started container nginx
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl delete po nginx --grace-period=0 --force
Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.
pod "nginx" force deleted
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl run nginx --image=nginx:1.17.4 --restart=Never --port=80
pod/nginx created
PS C:\Windows\system32> kubectl set image pod/nginx nginx=nginx:1.15-alpine
pod/nginx image updated
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl describe po nginx
Name:             nginx
Namespace:        default
Priority:         0
Service Account:  default
Node:             docker-desktop/192.168.65.4
Start Time:       Sun, 19 Mar 2023 06:17:10 +0530
Labels:           run=nginx
Annotations:      <none>
Status:           Running
IP:               10.1.0.8
IPs:
  IP:  10.1.0.8
Containers:
  nginx:
    Container ID:   docker://ce9e5fde1507042c1864558b9fc84c9cb238c95a25bb73cacc459fb41b6e920e
    Image:          nginx:1.15-alpine
    Image ID:       docker-pullable://nginx@sha256:57a226fb6ab6823027c0704a9346a890ffb0cacde06bc19bbc234c8720673555
    Port:           80/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 19 Mar 2023 06:17:45 +0530
    Last State:     Terminated
      Reason:       Completed
      Exit Code:    0
      Started:      Sun, 19 Mar 2023 06:17:34 +0530
      Finished:     Sun, 19 Mar 2023 06:17:35 +0530
    Ready:          True
    Restart Count:  1
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-sphl4 (ro)
Conditions:
  Type              Status
  Initialized       True
  Ready             True
  ContainersReady   True
  PodScheduled      True
Volumes:
  kube-api-access-sphl4:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age               From               Message
  ----    ------     ----              ----               -------
  Normal  Scheduled  36s               default-scheduler  Successfully assigned default/nginx to docker-desktop
  Normal  Pulling    35s               kubelet            Pulling image "nginx:1.17.4"
  Normal  Pulled     13s               kubelet            Successfully pulled image "nginx:1.17.4" in 22.4394011s
  Normal  Killing    11s               kubelet            Container nginx definition changed, will be restarted
  Normal  Pulling    10s               kubelet            Pulling image "nginx:1.15-alpine"
  Normal  Pulled     2s                kubelet            Successfully pulled image "nginx:1.15-alpine" in 8.4166606s
  Normal  Created    1s (x2 over 12s)  kubelet            Created container nginx
  Normal  Started    1s (x2 over 12s)  kubelet            Started container nginx
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl set image pod/nginx nginx=nginx:1.17.1
pod/nginx image updated
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -w
NAME    READY   STATUS    RESTARTS        AGE
nginx   1/1     Running   1 (3m59s ago)   4m24s
nginx   1/1     Running   2 (23s ago)     4m25s
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -o jsonpath='{.spec.containers[].image}{"\n"}'
error: error parsing jsonpath {.spec.containers[].image}{\n}, unrecognized character in action: U+005C '\'
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> $ kubectl get pods -o jsonpath="{.spec.containers[].image}{\\n}"
$ : The term '$' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ $ kubectl get pods -o jsonpath="{.spec.containers[].image}{\\n}"
+ ~
    + CategoryInfo          : ObjectNotFound: ($:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException

PS C:\Windows\system32> kubectl get pods -o jsonpath="{.spec.containers[].image}{\\n}"
error: error parsing jsonpath {.spec.containers[].image}{\\n}, unrecognized character in action: U+005C '\'
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get pods -o jsonpath="{.spec.containers[].image}"
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get pods
NAME    READY   STATUS    RESTARTS       AGE
nginx   1/1     Running   2 (4m2s ago)   8m4s
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -o jsonpath='{.spec.containers[].image}'
nginx:1.17.1


PS C:\Windows\system32> kubectl run nginx-1 --image=nginx --restart=Never
pod/nginx-1 created
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl exec -it nginx /bin/sh
kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.
#
#
# ^C
# ^C
# exit
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -o wide
NAME    READY   STATUS    RESTARTS      AGE   IP         NODE             NOMINATED NODE   READINESS GATES
nginx   1/1     Running   2 (14m ago)   18m   10.1.0.8   docker-desktop   <none>           <none>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl run busybox --image=busybox --restart=Never -- ls
pod/busybox created
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl logs busybox
bin
dev
etc
home
lib
lib64
proc
root
sys
tmp
usr
var



PS C:\Windows\system32> kubectl logs busybox -p
Error from server (BadRequest): previous terminated container "busybox" in pod "busybox" not found
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get pod busybox
NAME      READY   STATUS      RESTARTS   AGE
busybox   0/1     Completed   0          5m7s




PS C:\Windows\system32> kubectl run busybox-1 --image=busybox --restart=Never -- /bin/sh -c "sleep 60"
pod/busybox-1 created
PS C:\Windows\system32> 
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get pod busybox-1 -w
NAME        READY   STATUS    RESTARTS   AGE
busybox-1   1/1     Running   0          40s
busybox-1   0/1     Completed   0          64s
busybox-1   0/1     Completed   0          66s



PS C:\Windows\system32> kubectl run busybox-1 --image=busybox --restart=Never -- /bin/sh -c "sleep 3600"
pod/busybox-1 created
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx -o wide
NAME    READY   STATUS    RESTARTS      AGE   IP         NODE             NOMINATED NODE   READINESS GATES
nginx   1/1     Running   2 (42m ago)   46m   10.1.0.8   docker-desktop   <none>           <none>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl exec -it busybox-1 -- wget -o- 10.1.0.8
Connecting to 10.1.0.8 (10.1.0.8:80)
saving to 'index.html'
index.html           100% |*********************************************************************************************************************************************************************************************|   612  0:00:00 ETA
'index.html' saved



PS C:\Windows\system32> kubectl run busybox --image=nginx --restart=Never -it -- echo "How are you"
How are you
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl delete po busybox
pod "busybox" deleted
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl run busybox --image=nginx --restart=Never -it --rm -- echo "How are you"
How are you
pod "busybox" deleted




PS C:\Windows\system32> kubectl run nginx-2 --image=nginx --restart=Never --port=80
pod/nginx-2 created
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx --v=7
I0319 07:11:34.841541   11460 loader.go:374] Config loaded from file:  C:\Users\User\.kube\config
I0319 07:11:34.853061   11460 round_trippers.go:463] GET https://kubernetes.docker.internal:6443/api/v1/namespaces/default/pods/nginx
I0319 07:11:34.854060   11460 round_trippers.go:469] Request Headers:
I0319 07:11:34.854060   11460 round_trippers.go:473]     Accept: application/json;as=Table;v=v1;g=meta.k8s.io,application/json;as=Table;v=v1beta1;g=meta.k8s.io,application/json
I0319 07:11:34.854060   11460 round_trippers.go:473]     User-Agent: kubectl.exe/v1.25.4 (windows/amd64) kubernetes/872a965
I0319 07:11:34.872508   11460 round_trippers.go:574] Response Status: 200 OK in 18 milliseconds
NAME    READY   STATUS    RESTARTS      AGE
nginx   1/1     Running   2 (50m ago)   54m
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx --v=8
I0319 07:11:48.286123    7176 loader.go:374] Config loaded from file:  C:\Users\User\.kube\config
I0319 07:11:48.297126    7176 round_trippers.go:463] GET https://kubernetes.docker.internal:6443/api/v1/namespaces/default/pods/nginx
I0319 07:11:48.297126    7176 round_trippers.go:469] Request Headers:
I0319 07:11:48.297126    7176 round_trippers.go:473]     Accept: application/json;as=Table;v=v1;g=meta.k8s.io,application/json;as=Table;v=v1beta1;g=meta.k8s.io,application/json
I0319 07:11:48.297126    7176 round_trippers.go:473]     User-Agent: kubectl.exe/v1.25.4 (windows/amd64) kubernetes/872a965
I0319 07:11:48.313167    7176 round_trippers.go:574] Response Status: 200 OK in 16 milliseconds
I0319 07:11:48.313167    7176 round_trippers.go:577] Response Headers:
I0319 07:11:48.313167    7176 round_trippers.go:580]     X-Kubernetes-Pf-Flowschema-Uid: 63227214-a15a-482b-a0e2-7ed1a48af44f
I0319 07:11:48.313167    7176 round_trippers.go:580]     X-Kubernetes-Pf-Prioritylevel-Uid: 404f2442-24cf-4890-8f0f-cfd6d6d14e3b
I0319 07:11:48.313167    7176 round_trippers.go:580]     Date: Sun, 19 Mar 2023 01:41:48 GMT
I0319 07:11:48.313167    7176 round_trippers.go:580]     Audit-Id: 564c0afb-8471-4969-9064-0f7b616c71fc
I0319 07:11:48.313167    7176 round_trippers.go:580]     Cache-Control: no-cache, private
I0319 07:11:48.313167    7176 round_trippers.go:580]     Content-Type: application/json
I0319 07:11:48.314168    7176 request.go:1154] Response Body: {"kind":"Table","apiVersion":"meta.k8s.io/v1","metadata":{"resourceVersion":"2901"},"columnDefinitions":[{"name":"Name","type":"string","format":"name","description":"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names","priority":0},{"name":"Ready","type":"string","format":"","description":"The aggregate readiness state of this pod for accepting traffic.","priority":0},{"name":"Status","type":"string","format":"","description":"The aggregate status of the containers in this pod.","priority":0},{"name":"Restarts","type":"string","format":"","description":"The number of times the containers in this pod have been restarted and when the last container in this pod has restarted.","priority":0},{"name":"Age","type":"stri [truncated 3785 chars]
NAME    READY   STATUS    RESTARTS      AGE
nginx   1/1     Running   2 (50m ago)   54m
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po nginx --v=9
I0319 07:11:59.736689   13840 loader.go:374] Config loaded from file:  C:\Users\User\.kube\config
I0319 07:11:59.747207   13840 round_trippers.go:466] curl -v -XGET  -H "Accept: application/json;as=Table;v=v1;g=meta.k8s.io,application/json;as=Table;v=v1beta1;g=meta.k8s.io,application/json" -H "User-Agent: kubectl.exe/v1.25.4 (windows/amd64) kubernetes/872a965" 'https://kubernetes.docker.internal:6443/api/v1/namespaces/default/pods/nginx'
I0319 07:11:59.752206   13840 round_trippers.go:495] HTTP Trace: DNS Lookup for kubernetes.docker.internal resolved to [{127.0.0.1 }]
I0319 07:11:59.753208   13840 round_trippers.go:510] HTTP Trace: Dial to tcp:127.0.0.1:6443 succeed
I0319 07:11:59.767208   13840 round_trippers.go:553] GET https://kubernetes.docker.internal:6443/api/v1/namespaces/default/pods/nginx 200 OK in 18 milliseconds
I0319 07:11:59.767208   13840 round_trippers.go:570] HTTP Statistics: DNSLookup 3 ms Dial 1 ms TLSHandshake 7 ms ServerProcessing 6 ms Duration 18 ms
I0319 07:11:59.767208   13840 round_trippers.go:577] Response Headers:
I0319 07:11:59.767208   13840 round_trippers.go:580]     Audit-Id: 13a6131a-193d-4ffe-a8de-3065c8187db5
I0319 07:11:59.767208   13840 round_trippers.go:580]     Cache-Control: no-cache, private
I0319 07:11:59.768207   13840 round_trippers.go:580]     Content-Type: application/json
I0319 07:11:59.768207   13840 round_trippers.go:580]     X-Kubernetes-Pf-Flowschema-Uid: 63227214-a15a-482b-a0e2-7ed1a48af44f
I0319 07:11:59.768207   13840 round_trippers.go:580]     X-Kubernetes-Pf-Prioritylevel-Uid: 404f2442-24cf-4890-8f0f-cfd6d6d14e3b
I0319 07:11:59.768207   13840 round_trippers.go:580]     Date: Sun, 19 Mar 2023 01:41:59 GMT
I0319 07:11:59.768207   13840 request.go:1154] Response Body: {"kind":"Table","apiVersion":"meta.k8s.io/v1","metadata":{"resourceVersion":"2901"},"columnDefinitions":[{"name":"Name","type":"string","format":"name","description":"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names","priority":0},{"name":"Ready","type":"string","format":"","description":"The aggregate readiness state of this pod for accepting traffic.","priority":0},{"name":"Status","type":"string","format":"","description":"The aggregate status of the containers in this pod.","priority":0},{"name":"Restarts","type":"string","format":"","description":"The number of times the containers in this pod have been restarted and when the last container in this pod has restarted.","priority":0},{"name":"Age","type":"string","format":"","description":"CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata","priority":0},{"name":"IP","type":"string","format":"","description":"IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.","priority":1},{"name":"Node","type":"string","format":"","description":"NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.","priority":1},{"name":"Nominated Node","type":"string","format":"","description":"nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.","priority":1},{"name":"Readiness Gates","type":"string","format":"","description":"If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates","priority":1}],"rows":[{"cells":["nginx","1/1","Running","2 (50m ago)","54m","10.1.0.8","docker-desktop","\u003cnone\u003e","\u003cnone\u003e"],"object":{"kind":"PartialObjectMetadata","apiVersion":"meta.k8s.io/v1","metadata":{"name":"nginx","namespace":"default","uid":"81774521-fefc-43d8-95fa-15e0bdf26e8c","resourceVersion":"2901","creationTimestamp":"2023-03-19T00:47:10Z","labels":{"run":"nginx"},"managedFields":[{"manager":"kubectl-run","operation":"Update","apiVersion":"v1","time":"2023-03-19T00:47:10Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:labels":{".":{},"f:run":{}}},"f:spec":{"f:containers":{"k:{\"name\":\"nginx\"}":{".":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":80,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}}},{"manager":"kubectl-set","operation":"Update","apiVersion":"v1","time":"2023-03-19T00:51:12Z","fieldsType":"FieldsV1","fieldsV1":{"f:spec":{"f:containers":{"k:{\"name\":\"nginx\"}":{"f:image":{}}}}}},{"manager":"kubelet","operation":"Update","apiVersion":"v1","time":"2023-03-19T00:51:35Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.1.0.8\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]}}}]}
NAME    READY   STATUS    RESTARTS      AGE
nginx   1/1     Running   2 (50m ago)   54m




PS C:\Windows\system32> kubectl get po -o=custom-columns="POD_NAME:.metadata.name, POD_STATUS:.status.containerStatuses[].state"
POD_NAME     POD_STATUS
busybox-1   map[running:map[startedAt:2023-03-19T01:32:41Z]]
nginx       map[running:map[startedAt:2023-03-19T00:51:35Z]]
nginx-1     map[running:map[startedAt:2023-03-19T01:03:15Z]]
nginx-2     map[running:map[startedAt:2023-03-19T01:41:20Z]]
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get pods --sort-by=.metadata.name
NAME        READY   STATUS    RESTARTS      AGE
busybox-1   1/1     Running   0             16m
nginx       1/1     Running   2 (58m ago)   62m
nginx-1     1/1     Running   0             46m
nginx-2     1/1     Running   0             8m17s


PS C:\Windows\system32> kubectl get pods --sort-by=.metadata.creationTimestamp
NAME        READY   STATUS    RESTARTS      AGE
nginx       1/1     Running   2 (60m ago)   64m
nginx-1     1/1     Running   0             48m
busybox-1   1/1     Running   0             18m
nginx-2     1/1     Running   0             10m
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32>
PS C:\Windows\system32> kubectl get po -o=custom-columns="POD_NAME:.metadata.name, POD_STATUS:.status.containerStatuses[].state" --sort-by=.metadata.creationTimestamp
POD_NAME     POD_STATUS
nginx       map[running:map[startedAt:2023-03-19T00:51:35Z]]
nginx-1     map[running:map[startedAt:2023-03-19T01:03:15Z]]
busybox-1   map[running:map[startedAt:2023-03-19T01:32:41Z]]
nginx-2     map[running:map[startedAt:2023-03-19T01:41:20Z]]




PS C:\Users\User> kubectl create -f multi-container2.yaml
pod/busybox1 created
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User> kubectl get po
NAME        READY   STATUS        RESTARTS      AGE
busybox     1/2     Terminating   0             4m20s
busybox-1   1/1     Running       0             49m
busybox1    3/3     Running       0             17s
nginx       1/1     Running       2 (90m ago)   94m
nginx-1     1/1     Running       0             78m
nginx-2     1/1     Running       0             40m
PS C:\Users\User>
PS C:\Users\User> kubectl get po
NAME        READY   STATUS    RESTARTS      AGE
busybox-1   1/1     Running   0             49m
busybox1    3/3     Running   0             29s
nginx       1/1     Running   2 (91m ago)   95m
nginx-1     1/1     Running   0             79m
nginx-2     1/1     Running   0             41m




PS C:\Users\User> kubectl logs busybox1 -c busybox11
bin
dev
etc
home
lib
lib64
proc
root
sys
tmp
usr
var
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User> kubectl logs busybox1 -c busybox22
Hello world
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User> kubectl logs busybox1 -c busybox33
this is third container


PS C:\Users\User> kubectl exec busybox1 -c busybox33 -- ls
bin
dev
etc
home
lib
lib64
proc
root
sys
tmp
usr
var
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User>
PS C:\Users\User> kubectl top pod busybox1 --containers
error: Metrics API not available








37. Create 5 nginx pods in which two of them is labeled env=prod and three of them is labeled env=dev

controlplane $ kubectl run nginx-dev1 --image=nginx --restart=Never --labels=env=dev
pod/nginx-dev1 created
controlplane $ kubectl run nginx-dev2 --image=nginx --restart=Never --labels=env=dev
pod/nginx-dev2 created
controlplane $ kubectl run nginx-dev3 --image=nginx --restart=Never --labels=env=dev
pod/nginx-dev3 created
controlplane $ kubectl run nginx-prod1 --image=nginx --restart=Never --labels=env=prod
pod/nginx-prod1 created
controlplane $ kubectl run nginx-prod2 --image=nginx --restart=Never --labels=env=prod
pod/nginx-prod2 created



38. Verify all the pods are created with correct labels

controlplane $ kubectl get pods --show-labels
NAME          READY   STATUS    RESTARTS   AGE   LABELS
nginx-dev1    1/1     Running   0          44s   env=dev
nginx-dev2    1/1     Running   0          44s   env=dev
nginx-dev3    1/1     Running   0          44s   env=dev
nginx-prod1   1/1     Running   0          44s   env=prod
nginx-prod2   1/1     Running   0          42s   env=prod
controlplane $






39. Get the pods with label env=dev

controlplane $ kubectl get pods -l env=dev
NAME         READY   STATUS    RESTARTS   AGE
nginx-dev1   1/1     Running   0          3m8s
nginx-dev2   1/1     Running   0          3m8s
nginx-dev3   1/1     Running   0          3m8s
controlplane $


40. Get the pods with label env=dev and also output the labels

controlplane $ kubectl get pods -l env=dev --show-labels
NAME         READY   STATUS    RESTARTS   AGE     LABELS
nginx-dev1   1/1     Running   0          3m40s   env=dev
nginx-dev2   1/1     Running   0          3m40s   env=dev
nginx-dev3   1/1     Running   0          3m40s   env=dev
controlplane $ 




41. Get the pods with label env=prod

controlplane $ kubectl get pods -l env=prod
NAME          READY   STATUS    RESTARTS   AGE
nginx-prod1   1/1     Running   0          4m26s
nginx-prod2   1/1     Running   0          4m24s
controlplane $ 




42. Get the pods with label env=prod and also output the labels

controlplane $ kubectl get pods -l env=prod --show-labels
NAME          READY   STATUS    RESTARTS   AGE     LABELS
nginx-prod1   1/1     Running   0          4m41s   env=prod
nginx-prod2   1/1     Running   0          4m39s   env=prod
controlplane $ 



43. Get the pods with label env

controlplane $ kubectl get pods -L env
NAME          READY   STATUS    RESTARTS   AGE     ENV
nginx-dev1    1/1     Running   0          5m31s   dev
nginx-dev2    1/1     Running   0          5m31s   dev
nginx-dev3    1/1     Running   0          5m31s   dev
nginx-prod1   1/1     Running   0          5m31s   prod
nginx-prod2   1/1     Running   0          5m29s   prod
controlplane $



44. Get the pods with labels env=dev and env=prod

controlplane $ kubectl get pods -l 'env in (dev,prod)'
NAME          READY   STATUS    RESTARTS   AGE
nginx-dev1    1/1     Running   0          6m47s
nginx-dev2    1/1     Running   0          6m47s
nginx-dev3    1/1     Running   0          6m47s
nginx-prod1   1/1     Running   0          6m47s
nginx-prod2   1/1     Running   0          6m45s
controlplane $





45. Get the pods with labels env=dev and env=prod and output the labels as well

controlplane $ kubectl get pods -l 'env in (dev,prod)' --show-labels
NAME          READY   STATUS    RESTARTS   AGE     LABELS
nginx-dev1    1/1     Running   0          7m34s   env=dev
nginx-dev2    1/1     Running   0          7m34s   env=dev
nginx-dev3    1/1     Running   0          7m34s   env=dev
nginx-prod1   1/1     Running   0          7m34s   env=prod
nginx-prod2   1/1     Running   0          7m32s   env=prod
controlplane $ 



46. Change the label for one of the pod to env=uat and list all the pods to verify


controlplane $ kubectl label pod/nginx-dev3 env=uat --overwrite
pod/nginx-dev3 labeled


controlplane $ kubectl get pods --show-labels
NAME          READY   STATUS    RESTARTS   AGE    LABELS
nginx-dev1    1/1     Running   0          8m3s   env=dev
nginx-dev2    1/1     Running   0          8m3s   env=dev
nginx-dev3    1/1     Running   0          8m3s   env=uat
nginx-prod1   1/1     Running   0          8m3s   env=prod
nginx-prod2   1/1     Running   0          8m1s   env=prod
controlplane $ 



47. Remove the labels for the pods that we created now and verify all the labels are removed

ontrolplane $ kubectl label pod nginx-dev{1..3} env-
pod/nginx-dev1 unlabeled
pod/nginx-dev2 unlabeled
pod/nginx-dev3 unlabeled


controlplane $ kubectl label pod nginx-prod{1..2} env-
pod/nginx-prod1 unlabeled
pod/nginx-prod2 unlabeled


controlplane $ kubectl get po --show-labels
NAME          READY   STATUS    RESTARTS   AGE   LABELS
nginx-dev1    1/1     Running   0          10m   <none>
nginx-dev2    1/1     Running   0          10m   <none>
nginx-dev3    1/1     Running   0          10m   <none>
nginx-prod1   1/1     Running   0          10m   <none>
nginx-prod2   1/1     Running   0          10m   <none>
controlplane $ 



48. Let’s add the label app=nginx for all the pods and verify

controlplane $ kubectl label pod nginx-dev{1..3} app=nginx
pod/nginx-dev1 labeled
pod/nginx-dev2 labeled
pod/nginx-dev3 labeled


controlplane $ kubectl label pod nginx-prod{1..2} app=nginx
pod/nginx-prod1 labeled
pod/nginx-prod2 labeled


controlplane $ kubectl get po --show-labels
NAME          READY   STATUS    RESTARTS   AGE   LABELS
nginx-dev1    1/1     Running   0          13m   app=nginx
nginx-dev2    1/1     Running   0          13m   app=nginx
nginx-dev3    1/1     Running   0          13m   app=nginx
nginx-prod1   1/1     Running   0          13m   app=nginx
nginx-prod2   1/1     Running   0          13m   app=nginx
controlplane $



controlplane $ kubectl label pod nginx-prod{1..2} tst=test1 
pod/nginx-prod1 labeled
pod/nginx-prod2 labeled
controlplane $ 


controlplane $ 
controlplane $ kubectl get po --show-labels
NAME          READY   STATUS    RESTARTS   AGE   LABELS
nginx-dev1    1/1     Running   0          14m   app=nginx
nginx-dev2    1/1     Running   0          14m   app=nginx
nginx-dev3    1/1     Running   0          14m   app=nginx
nginx-prod1   1/1     Running   0          14m   app=nginx,tst=test1
nginx-prod2   1/1     Running   0          14m   app=nginx,tst=test1
controlplane $ 


49.  Get all the nodes with labels (if using minikube you would get only master node)

controlplane $ kubectl get nodes --show-labels
NAME           STATUS   ROLES           AGE   VERSION   LABELS
controlplane   Ready    control-plane   30d   v1.26.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=controlplane,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node.kubernetes.io/exclude-from-external-load-balancers=
node01         Ready    <none>          30d   v1.26.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node01,kubernetes.io/os=linux
controlplane $


50. Label the node (minikube if you are using) nodeName=nginxnode

controlplane $ kubectl label node node01 nodeName=nginxnode
node/node01 labeled
controlplane $ 


controlplane $ 
controlplane $ kubectl get nodes --show-labels
NAME           STATUS   ROLES           AGE   VERSION   LABELS
controlplane   Ready    control-plane   30d   v1.26.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=controlplane,kubernetes.io/os=linux,node-role.kubernetes.io/control-plane=,node.kubernetes.io/exclude-from-external-load-balancers=
node01         Ready    <none>          30d   v1.26.1   beta.kubernetes.io/arch=amd64,beta.kubernetes.io/os=linux,kubernetes.io/arch=amd64,kubernetes.io/hostname=node01,kubernetes.io/os=linux,nodeName=nginxnode
controlplane $


51.  Create a Pod that will be deployed on this node with the label nodeName=nginxnode

controlplane $ kubectl run nginx --image=nginx --restart=Never --dry-run=client -o yaml > pod.yaml
controlplane $


Add the nodeSelector part in the file pod.yaml

apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: nginx
  name: nginx
spec:
  nodeSelector:
    nodeName: nginxnode
  containers:
  - image: nginx
    name: nginx
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}


controlplane $ kubectl create -f pod.yaml
pod/nginx created
controlplane $


52.  Verify the pod that it is scheduled with the node selector

controlplane $ kubectl describe po nginx | grep Node-Selectors
Node-Selectors:              nodeName=nginxnode
controlplane $



53. Verify the pod nginx that we just created has this label

controlplane $ kubectl describe po nginx | grep Labels
Labels:           run=nginx
controlplane $







54. Annotate the pods with name=webapp

kubectl annotate pod nginx-dev{1..3} name=webapp
kubectl annotate pod nginx-prod{1..2} name=webapp













55. Verify the pods that have been annotated correctly

controlplane $ kubectl describe po nginx-dev{1..3} | grep -i annotations
Annotations:      cni.projectcalico.org/containerID: 49ae56fa9a4a0ab6238240609b2e5f6a817d8e5e5fdeefa9e5d2ca2547895c8d
Annotations:      cni.projectcalico.org/containerID: aaec163c984fec45e1cfc089ea12081a137d5816a6787edf2c114a6c9f2a2e3a
Annotations:      cni.projectcalico.org/containerID: 9d98204d3be189c16e3b9aba375ef0c9d498c75dc57c683900a17a36ed347762


controlplane $ kubectl describe po nginx-prod{1..2} | grep -i annotations
Annotations:      cni.projectcalico.org/containerID: 360a95f750c102e08aa56bf221a6b3e5c0b5c7c384c7b462b33479482c7bd7eb
Annotations:      cni.projectcalico.org/containerID: cd573f84c9421459dd8d2b92caba1907390f7b5e5bf72e1dfca14f1d57353a63
controlplane $










56.  Remove the annotations on the pods and verify

controlplane $ kubectl annotate pod nginx-dev{1..3} name-
pod/nginx-dev1 annotated
pod/nginx-dev2 annotated
pod/nginx-dev3 annotated


controlplane $ kubectl annotate pod nginx-prod{1..2} name-
pod/nginx-prod1 annotated
pod/nginx-prod2 annotated


controlplane $ kubectl describe po nginx-dev{1..3} | grep -i annotations
Annotations:      cni.projectcalico.org/containerID: 49ae56fa9a4a0ab6238240609b2e5f6a817d8e5e5fdeefa9e5d2ca2547895c8d
Annotations:      cni.projectcalico.org/containerID: aaec163c984fec45e1cfc089ea12081a137d5816a6787edf2c114a6c9f2a2e3a
Annotations:      cni.projectcalico.org/containerID: 9d98204d3be189c16e3b9aba375ef0c9d498c75dc57c683900a17a36ed347762


controlplane $ kubectl describe po nginx-prod{1..2} | grep -i annotations
Annotations:      cni.projectcalico.org/containerID: 360a95f750c102e08aa56bf221a6b3e5c0b5c7c384c7b462b33479482c7bd7eb
Annotations:      cni.projectcalico.org/containerID: cd573f84c9421459dd8d2b92caba1907390f7b5e5bf72e1dfca14f1d57353a63
controlplane $ 




57. Remove all the pods that we created so far

controlplane $ kubectl delete po --all
pod "nginx" deleted
pod "nginx-dev1" deleted
pod "nginx-dev2" deleted
pod "nginx-dev3" deleted
pod "nginx-prod1" deleted
pod "nginx-prod2" deleted

controlplane $ 



58. Create a deployment called webapp with image nginx with 5 replicas

controlplane $ kubectl create deploy webapp --image=nginx --dry-run=client -o yaml > webapp.yaml

change the replicas to 5 and then run

controlplane $ kubectl create -f webapp.yaml
deployment.apps/webapp created
controlplane $



59. Get the deployment you just created with labels

controlplane $ kubectl get deploy webapp --show-labels
NAME     READY   UP-TO-DATE   AVAILABLE   AGE   LABELS
webapp   5/5     5            5           69s   app=webapp
controlplane $ 


60. Output the yaml file of the deployment you just created

controlplane $ kubectl get deploy webapp -o yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
  creationTimestamp: "2023-03-26T03:14:52Z"
  generation: 1
  labels:
    app: webapp
  name: webapp
  namespace: default
  resourceVersion: "6767"
  uid: 6ab88104-f0e0-4034-85cc-9d85005128a8
spec:
  progressDeadlineSeconds: 600
  replicas: 5
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: webapp
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: webapp
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 5
  conditions:
  - lastTransitionTime: "2023-03-26T03:15:00Z"
    lastUpdateTime: "2023-03-26T03:15:00Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2023-03-26T03:14:52Z"
    lastUpdateTime: "2023-03-26T03:15:01Z"
    message: ReplicaSet "webapp-754bcc647d" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 1
  readyReplicas: 5
  replicas: 5
  updatedReplicas: 5
controlplane $




61. Get the pods of this deployment

controlplane $ kubectl get deploy --show-labels
NAME     READY   UP-TO-DATE   AVAILABLE   AGE     LABELS
webapp   5/5     5            5           2m17s   app=webapp
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ kubectl get pods -l app=webapp
NAME                      READY   STATUS    RESTARTS   AGE
webapp-754bcc647d-2prxx   1/1     Running   0          2m42s
webapp-754bcc647d-h2l4g   1/1     Running   0          2m42s
webapp-754bcc647d-hv522   1/1     Running   0          2m42s
webapp-754bcc647d-p8rpq   1/1     Running   0          2m42s
webapp-754bcc647d-xfw6h   1/1     Running   0          2m42s
controlplane $



62. Scale the deployment from 5 replicas to 20 replicas and verify

controlplane $ kubectl scale deploy webapp --replicas=20
deployment.apps/webapp scaled
controlplane $ kubectl get po -l app=webapp
NAME                      READY   STATUS              RESTARTS   AGE
webapp-754bcc647d-2prxx   1/1     Running             0          3m14s
webapp-754bcc647d-4w5v9   0/1     ContainerCreating   0          1s
webapp-754bcc647d-54w26   0/1     ContainerCreating   0          1s
webapp-754bcc647d-9brpr   0/1     ContainerCreating   0          1s
webapp-754bcc647d-9h24h   0/1     ContainerCreating   0          1s
webapp-754bcc647d-b22qj   0/1     Pending             0          1s
webapp-754bcc647d-dwtsq   0/1     ContainerCreating   0          1s
webapp-754bcc647d-fr9qv   0/1     ContainerCreating   0          1s
webapp-754bcc647d-h2l4g   1/1     Running             0          3m14s
webapp-754bcc647d-h6m94   0/1     Pending             0          1s
webapp-754bcc647d-hv522   1/1     Running             0          3m14s
webapp-754bcc647d-jsmb6   0/1     Pending             0          1s
webapp-754bcc647d-k48fl   0/1     ContainerCreating   0          1s
webapp-754bcc647d-mphzx   0/1     Pending             0          1s
webapp-754bcc647d-p8rpq   1/1     Running             0          3m14s
webapp-754bcc647d-ptrcf   0/1     Pending             0          1s
webapp-754bcc647d-x6cb4   0/1     ContainerCreating   0          1s
webapp-754bcc647d-xdzlj   0/1     ContainerCreating   0          1s
webapp-754bcc647d-xfw6h   1/1     Running             0          3m14s
webapp-754bcc647d-zfzct   0/1     ContainerCreating   0          1s
controlplane $ 



63. Get the deployment rollout status

controlplane $ kubectl rollout status deploy webapp
deployment "webapp" successfully rolled out
controlplane 














64. Get the replicaset that created with this deployment

controlplane $ kubectl get rs -l app=webapp
NAME                DESIRED   CURRENT   READY   AGE
webapp-754bcc647d   20        20        20      5m26s
controlplane $


65. Get the yaml of the replicaset and pods of this deployment

controlplane $ kubectl get rs -l app=webapp -o yaml
apiVersion: v1
items:
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "20"
      deployment.kubernetes.io/max-replicas: "25"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2023-03-26T03:14:52Z"
    generation: 2
    labels:
      app: webapp
      pod-template-hash: 754bcc647d
    name: webapp-754bcc647d
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: webapp
      uid: 6ab88104-f0e0-4034-85cc-9d85005128a8
    resourceVersion: "7237"
    uid: 670c764e-785d-42f6-bbe8-def4aa3506d9
  spec:
    replicas: 20
    selector:
      matchLabels:
        app: webapp
        pod-template-hash: 754bcc647d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: webapp
          pod-template-hash: 754bcc647d
      spec:
        containers:
        - image: nginx
          imagePullPolicy: Always
          name: nginx
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 20
    fullyLabeledReplicas: 20
    observedGeneration: 2
    readyReplicas: 20
    replicas: 20
kind: List
metadata:
  resourceVersion: ""
controlplane 





controlplane $ kubectl get po -l app=webapp -o yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 661f537fd96a205dd8748461520f48e5345803f4ea51fd08b76ede4616450527
      cni.projectcalico.org/podIP: 192.168.1.9/32
      cni.projectcalico.org/podIPs: 192.168.1.9/32
    creationTimestamp: "2023-03-26T03:14:52Z"
    generateName: webapp-754bcc647d-
    labels:
      app: webapp
      pod-template-hash: 754bcc647d
    name: webapp-754bcc647d-2prxx
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: webapp-754bcc647d
      uid: 670c764e-785d-42f6-bbe8-def4aa3506d9
    resourceVersion: "6744"
    uid: da383564-aafc-4eac-bf97-6b0b121342cd
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-gvr27
        readOnly: true
    dnsPolicy: ClusterFirs
    enableServiceLinks: true
	
	.
	.
	.
	.
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      cni.projectcalico.org/containerID: 532eda24a66e46f666f898023a2cbf836f03448033e8c96e6ef89b03eceeeafd
      cni.projectcalico.org/podIP: 192.168.1.13/32
      cni.projectcalico.org/podIPs: 192.168.1.13/32
    creationTimestamp: "2023-03-26T03:18:05Z"
    generateName: webapp-754bcc647d-
    labels:
      app: webapp
      pod-template-hash: 754bcc647d
    name: webapp-754bcc647d-zfzct
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: webapp-754bcc647d
      uid: 670c764e-785d-42f6-bbe8-def4aa3506d9
    resourceVersion: "7154"
    uid: 99791b78-7c51-437f-94a9-d2b11efc6b43
  spec:
    containers:
    - image: nginx
      imagePullPolicy: Always
      name: nginx
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-g424j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: node01
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-g424j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2023-03-26T03:18:05Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2023-03-26T03:18:08Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2023-03-26T03:18:08Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2023-03-26T03:18:05Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9d9b89e57cc267817b45c0b8cce0cd2ba22d1554608e011bc1e38d23e2338b03
      image: docker.io/library/nginx:latest
      imageID: docker.io/library/nginx@sha256:f4e3b6489888647ce1834b601c6c06b9f8c03dee6e097e13ed3e28c01ea3ac8c
      lastState: {}
      name: nginx
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2023-03-26T03:18:08Z"
    hostIP: 172.30.2.2
    phase: Running
    podIP: 192.168.1.13
    podIPs:
    - ip: 192.168.1.13
    qosClass: BestEffort
    startTime: "2023-03-26T03:18:05Z"
kind: List
metadata:
  resourceVersion: ""
controlplane $





66. Delete the deployment you just created and watch all the pods are also being deleted

controlplane $ 
controlplane $ kubectl delete deploy webapp

deployment.apps "webapp" deleted



controlplane $ kubectl get po -l app=webapp
No resources found in default namespace.
controlplane $ 
controlplane $




67. Create a deployment of webapp with image nginx:1.17.1 with container port 80 and verify the image version


controlplane $ kubectl create deploy webapp --image=nginx:1.17.1 --dry-run=client -o yaml > webapp.yaml
controlplane $ 
controlplane $ 
controlplane $ ls
filesystem  webapp.yaml
controlplane $ 
controlplane $ 
controlplane $ kubectl create -f webapp.yaml
deployment.apps/webapp created
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        nginx:1.17.1
controlplane $ 



68. Update the deployment with the image version 1.17.4 and verify

controlplane $ kubectl set image deploy/webapp nginx=nginx:1.17.4
deployment.apps/webapp image updated
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        nginx:1.17.4
controlplane $ 
controlplane $


69. Check the rollout history and make sure everything is ok after the update

controlplane $ kubectl rollout history deploy webapp
deployment.apps/webapp 
REVISION  CHANGE-CAUSE
1         <none>
2         <none>

controlplane $ 
controlplane $ 
controlplane $ kubectl get deploy webapp --show-labels
NAME     READY   UP-TO-DATE   AVAILABLE   AGE     LABELS
webapp   1/1     1            1           3m48s   app=webapp
controlplane $ 
controlplane $ 
controlplane $ kubectl get rs -l app=webapp
NAME                DESIRED   CURRENT   READY   AGE
webapp-8694f5cb9c   1         1         1       110s
webapp-c6cc4c674    0         0         0       4m16s
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ kubectl get po -l app=webapp
NAME                      READY   STATUS    RESTARTS   AGE
webapp-8694f5cb9c-4t8sg   1/1     Running   0          2m11s
controlplane $ 
controlplane $ 
controlplane $ 


70. Undo the deployment to the previous version 1.17.1 and verify Image has the previous version

controlplane $ kubectl rollout undo deploy webapp
deployment.apps/webapp rolled back
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        nginx:1.17.1
controlplane $ 
controlplane $




71. Update the deployment with the image version 1.16.1 and verify the image and also check the rollout history

controlplane $ kubectl set image deploy/webapp nginx=nginx:1.16.1
deployment.apps/webapp image updated
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        nginx:1.16.1
controlplane $ 
controlplane $ 
controlplane $ kubectl rollout history deploy webapp
deployment.apps/webapp 
REVISION  CHANGE-CAUSE
2         <none>
3         <none>
4         <none>

controlplane $


72 . Update the deployment to the Image 1.17.1 and verify everything is ok

controlplane $ kubectl rollout undo deploy webapp --to-revision=3
deployment.apps/webapp rolled back
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        nginx:1.17.1
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ kubectl rollout status deploy webapp
deployment "webapp" successfully rolled out
controlplane $ 
controlplane $ 




73. Update the deployment with the wrong image version 1.100 and verify something is wrong with the deployment

controlplane $ kubectl set image deploy/webapp nginx=ngins:1.100
deployment.apps/webapp image updated
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        ngins:1.100
controlplane $ 
controlplane $
controlplane $ kubectl rollout status deploy webapp
Waiting for deployment "webapp" rollout to finish: 1 old replicas are pending termination...
^Ccontrolplane $ 
controlplane $ 
controlplane $ kubectl get pods
NAME                      READY   STATUS             RESTARTS   AGE
webapp-779f5b68fc-7spt8   0/1     ImagePullBackOff   0          3m44s
webapp-c758549-wb642      1/1     Running            0          5m28s
controlplane $ 



74. Undo the deployment with the previous version and verify everything is Ok

controlplane $ kubectl rollout undo deploy webapp
deployment.apps/webapp rolled back
controlplane $ 
controlplane $ 
controlplane $ kubectl describe deploy webapp | grep Image
    Image:        nginx:1.17.1
controlplane $ 
controlplane $ 
controlplane $ kubectl rollout status deploy webapp
deployment "webapp" successfully rolled out
controlplane $ 
controlplane $ 
controlplane $ kubectl get pods
NAME                     READY   STATUS    RESTARTS   AGE
webapp-c6cc4c674-4l65g   1/1     Running   0          3m8s
controlplane $



75.  Check the history of the specific revision of that deployment

controlplane $ kubectl rollout history deploy webapp --revision=7
deployment.apps/webapp with revision #7
Pod Template:
  Labels:       app=webapp
        pod-template-hash=7746fbfc6
  Containers:
   nginx:
    Image:      nginx=1.16.1
    Port:       <none>
    Host Port:  <none>
    Environment:        <none>
    Mounts:     <none>
  Volumes:      <none>

controlplane 


76. Pause the rollout of the deployment

controlplane $ kubectl rollout pause deploy webapp
deployment.apps/webapp paused
controlplane $ 



77. Update the deployment with the image version latest and check the history and verify nothing is going on


controlplane $ kubectl rollout history deploy/webapp
deployment.apps/webapp 
REVISION  CHANGE-CAUSE
2         <none>
4         <none>
5         <none>
6         <none>
7         <none>
9         <none>
10        <none>

controlplane $ 
controlplane $ 
controlplane $ kubectl set image deploy/webapp nginx=nginx:latest
deployment.apps/webapp image updated
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ kubectl rollout history deploy/webapp
deployment.apps/webapp 
REVISION  CHANGE-CAUSE
2         <none>
4         <none>
5         <none>
6         <none>
7         <none>
9         <none>
10        <none>



78. Resume the rollout of the deployment

controlplane $ kubectl rollout resume deploy webapp
deployment.apps/webapp resumed
controlplane $ 
controlplane $


79. Check the rollout history and verify it has the new version

controlplane $ kubectl rollout history deploy webapp
deployment.apps/webapp 
REVISION  CHANGE-CAUSE
2         <none>
4         <none>
5         <none>
6         <none>
7         <none>
9         <none>
10        <none>
11        <none>

controlplane $ 
controlplane $ kubectl rollout history deploy webapp --revision=11
deployment.apps/webapp with revision #11
Pod Template:
  Labels:       app=webapp
        pod-template-hash=866655f4cf
  Containers:
   nginx:
    Image:      nginx:latest
    Port:       <none>
    Host Port:  <none>
    Environment:        <none>
    Mounts:     <none>
  Volumes:      <none>

controlplane $ 


80. Apply the autoscaling to this deployment with minimum 10 and maximum 20 replicas and target CPU of 85%
and verify hpa is created and replicas are increased to 10 from 1

controlplane $ kubectl autoscale deploy webapp --min=10 --max=20 --cpu-percent=85
horizontalpodautoscaler.autoscaling/webapp autoscaled
controlplane $ 
controlplane $ 
controlplane $
controlplane $ kubectl get hpa
NAME     REFERENCE           TARGETS         MINPODS   MAXPODS   REPLICAS   AGE
webapp   Deployment/webapp   <unknown>/85%   10        20        10         42s
controlplane $ 
controlplane $ 
controlplane $ 
controlplane $ kubectl get pod -l app=webapp
NAME                      READY   STATUS    RESTARTS   AGE
webapp-866655f4cf-2n6tf   1/1     Running   0          18s
webapp-866655f4cf-4vl26   1/1     Running   0          18s
webapp-866655f4cf-5wblt   1/1     Running   0          18s
webapp-866655f4cf-7j48b   1/1     Running   0          6m1s
webapp-866655f4cf-d2tqr   1/1     Running   0          18s
webapp-866655f4cf-dfbpj   1/1     Running   0          18s
webapp-866655f4cf-jh2zw   1/1     Running   0          17s
webapp-866655f4cf-m84z6   1/1     Running   0          18s
webapp-866655f4cf-q2vlm   1/1     Running   0          18s
webapp-866655f4cf-sz2xf   1/1     Running   0          17s
controlplane $



81.  Clean the cluster by deleting deployment and hpa you just created

controlplane $ kubectl delete deploy webapp
deployment.apps "webapp" deleted
controlplane $ 
controlplane $ 
controlplane $ kubectl get deploy webapp
Error from server (NotFound): deployments.apps "webapp" not found
controlplane $ 
controlplane $ kubectl get hpa          
NAME     REFERENCE           TARGETS         MINPODS   MAXPODS   REPLICAS   AGE
webapp   Deployment/webapp   <unknown>/85%   10        20        10         6m34s
controlplane $ 
controlplane $ 
controlplane $ kubectl delete hpa webapp
horizontalpodautoscaler.autoscaling "webapp" deleted
controlplane $ 
controlplane $ 








